2025-07-11 12:07:46,956 - INFO - Sample train set 1500/67349
2025-07-11 12:07:46,957 - INFO - ... including dev set 500 samples
2025-07-11 12:07:46,957 - INFO - Loading model with FP16...
/home/rinya/anaconda3/envs/zollm/lib/python3.10/site-packages/huggingface_hub/file_download.py:797: FutureWarning: `resume_download` is deprecated and will be removed in version 1.0.0. Downloads always resume when possible. If you want to force a new download, use `force_download=True`.
  warnings.warn(
37
2025-07-11 12:07:51,521 - INFO - Done with 4.56s
2025-07-11 12:07:51,855 - INFO - Dev samples: 500
2025-07-11 12:07:51,856 - INFO - Train samples: 1000
2025-07-11 12:07:51,856 - INFO - Eval sample length is 872
2025-07-11 12:07:51,856 - INFO - Tokenizing training samples...
### layer-wise gradient sparsity = None
-------------------------- Training Epoch 0 --------------------------
2025-07-11 12:07:52,722 - INFO - Done with 0.87s
/home/rinya/anaconda3/envs/zollm/lib/python3.10/site-packages/transformers/optimization.py:391: FutureWarning: This implementation of AdamW is deprecated and will be removed in a future version. Use the PyTorch implementation torch.optim.AdamW instead, or set `no_deprecation_warning=True` to disable this warning
  warnings.warn(
2025-07-11 12:07:52,735 - INFO - ***** Running training *****
2025-07-11 12:07:52,736 - INFO -   Num examples = 1000
2025-07-11 12:07:52,736 - INFO -   Num Epochs = 318
2025-07-11 12:07:52,736 - INFO -   Instantaneous batch size per device = 16
2025-07-11 12:07:52,736 - INFO -   Total train batch size (w. parallel, distributed & accumulation) = 16
2025-07-11 12:07:52,736 - INFO -   Gradient Accumulation steps = 1
2025-07-11 12:07:52,736 - INFO -   Total optimization steps = 20000
2025-07-11 12:07:52,737 - INFO -   Number of trainable parameters = 1315758080
  0%|                                                                                                                                                       | 0/20000 [00:00<?, ?it/s]You're using a GPT2TokenizerFast tokenizer. Please note that with a fast tokenizer, using the `__call__` method is faster than using a method to encode the text followed by a call to the `pad` method to get a padded encoding.
  0%|                                                                                                                                             | 4/20000 [00:01<2:10:20,  2.56it/s]
{'peak_mem': 5.484857559204102, 'step_consumption': 685.9700679779053, 'epoch': 0.02}
{'peak_mem': 5.497550964355469, 'step_consumption': 344.5544242858887, 'epoch': 0.03}
{'peak_mem': 5.616346836090088, 'step_consumption': 351.7498970031738, 'epoch': 0.05}
{'peak_mem': 5.616346836090088, 'step_consumption': 334.108829498291, 'epoch': 0.06}

  0%|                                                                                                                                            | 10/20000 [00:03<1:52:36,  2.96it/s]
{'peak_mem': 5.616346836090088, 'step_consumption': 335.6647491455078, 'epoch': 0.1}
{'peak_mem': 5.616346836090088, 'step_consumption': 335.1163864135742, 'epoch': 0.11}
{'peak_mem': 5.616346836090088, 'step_consumption': 316.61367416381836, 'epoch': 0.13}
{'peak_mem': 5.616346836090088, 'step_consumption': 322.6652145385742, 'epoch': 0.14}
{'loss': 0.0, 'learning_rate': 0.5, 'epoch': 0.16}
{'peak_mem': 5.616346836090088, 'step_consumption': 351.712703704834, 'epoch': 0.16}

  0%|                                                                                                                                            | 15/20000 [00:05<1:55:14,  2.89it/s]
{'peak_mem': 5.616346836090088, 'step_consumption': 354.7189235687256, 'epoch': 0.19}
{'peak_mem': 5.616346836090088, 'step_consumption': 338.4103775024414, 'epoch': 0.21}
{'peak_mem': 5.616346836090088, 'step_consumption': 351.8517017364502, 'epoch': 0.22}
{'peak_mem': 5.616346836090088, 'step_consumption': 335.74581146240234, 'epoch': 0.24}
{'peak_mem': 5.616346836090088, 'step_consumption': 327.9249668121338, 'epoch': 0.25}

  0%|▏                                                                                                                                           | 21/20000 [00:07<1:58:14,  2.82it/s]
{'peak_mem': 5.735144138336182, 'step_consumption': 379.55641746520996, 'epoch': 0.29}
{'peak_mem': 5.735144138336182, 'step_consumption': 354.77757453918457, 'epoch': 0.3}
{'loss': 0.0, 'learning_rate': 0.5, 'epoch': 0.32}
{'peak_mem': 5.735144138336182, 'step_consumption': 353.20425033569336, 'epoch': 0.32}
{'peak_mem': 5.735144138336182, 'step_consumption': 353.7311553955078, 'epoch': 0.33}
  0%|▏                                                                                                                                           | 22/20000 [00:07<1:58:18,  2.81it/s]Traceback (most recent call last):
  File "/home/rinya/zero-order-optimization/src/run.py", line 740, in <module>
    main()
  File "/home/rinya/zero-order-optimization/src/run.py", line 692, in main
    framework.train(train_samples, dev_samples if dev_samples is not None else eval_samples, eval_samples)
  File "/home/rinya/zero-order-optimization/src/run.py", line 577, in train
    trainer.train(resume_from_checkpoint=last_checkpoint)
  File "/home/rinya/anaconda3/envs/zollm/lib/python3.10/site-packages/transformers/trainer.py", line 1662, in train
    return inner_training_loop(
  File "/home/rinya/zero-order-optimization/src/trainer.py", line 544, in _inner_training_loop
    tr_loss_step = self.optimizer.step(model, inputs)
  File "/home/rinya/anaconda3/envs/zollm/lib/python3.10/site-packages/torch/optim/optimizer.py", line 373, in wrapper
    out = func(*args, **kwargs)
  File "/home/rinya/anaconda3/envs/zollm/lib/python3.10/site-packages/torch/utils/_contextlib.py", line 115, in decorate_context
    return func(*args, **kwargs)
  File "/home/rinya/zero-order-optimization/src/optimizers/zo_conserv.py", line 83, in step
    update_params()
  File "/home/rinya/zero-order-optimization/src/optimizers/zo_conserv.py", line 79, in update_params
    self._inner_optimizer.step()
  File "/home/rinya/anaconda3/envs/zollm/lib/python3.10/site-packages/torch/optim/optimizer.py", line 373, in wrapper
    out = func(*args, **kwargs)
  File "/home/rinya/anaconda3/envs/zollm/lib/python3.10/site-packages/torch/optim/optimizer.py", line 76, in _use_grad
    ret = func(self, *args, **kwargs)
  File "/home/rinya/anaconda3/envs/zollm/lib/python3.10/site-packages/torch/optim/sgd.py", line 75, in step
    sgd(params_with_grad,
  File "/home/rinya/anaconda3/envs/zollm/lib/python3.10/site-packages/torch/optim/sgd.py", line 220, in sgd
    func(params,
  File "/home/rinya/anaconda3/envs/zollm/lib/python3.10/site-packages/torch/optim/sgd.py", line 299, in _multi_tensor_sgd
    for i in range(len(device_momentum_buffer_list)):
KeyboardInterrupt